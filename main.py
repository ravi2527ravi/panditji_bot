import os
import threading
import pandas as pd
from flask import Flask
from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# Load NSE/BSE data from CSV (assumes preloaded CSV file in project directory)
try:
    stock_data = pd.read_csv("nse_bse_data.csv")
except:
    stock_data = pd.DataFrame()

# Define Telegram bot commands
def run_telegram_bot():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("\ud83d\ude4f ‡§ú‡§Ø ‡§∂‡•ç‡§∞‡•Ä ‡§∞‡§æ‡§Æ! ‡§Æ‡•à‡§Ç Panditji Bot ‡§π‡•Ç‡§Å‡•§ ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à \ud83d\udd71")

    async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        help_text = (
            "üß† *Panditji Bot Commands*\n"
            "\n"
            "‚úÖ /start - ‡§¨‡•â‡§ü ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç\n"
            "‚úÖ /help - ‡§∏‡§≠‡•Ä ‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏ ‡§ï‡•Ä ‡§≤‡§ø‡§∏‡•ç‡§ü\n"
            "‚úÖ /news - ‡§Ü‡§ú ‡§ï‡•Ä ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü ‡§®‡•ç‡§Ø‡•Ç‡§ú‡§º\n"
            "‚úÖ /trend <STOCK/INDEX> - ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü ‡§ü‡•ç‡§∞‡•á‡§Ç‡§° ‡§¨‡§§‡§æ‡§è‡§Ç (AI ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§)\n"
            "‚úÖ /fundamentals <STOCK> - ‡§ï‡§Ç‡§™‡§®‡•Ä ‡§ï‡•á ‡§´‡§Ç‡§°‡§æ‡§Æ‡•á‡§Ç‡§ü‡§≤‡•ç‡§∏\n"
            "‚úÖ /oi <STOCK> - ‡§ë‡§™‡•ç‡§∂‡§® ‡§ö‡•á‡§® + ‡§™‡•Ä‡§∏‡•Ä‡§Ü‡§∞\n"
            "‚úÖ /scan - ‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§®‡§∂‡•â‡§ü ‡§≠‡•á‡§ú‡•á‡§Ç, ‡§™‡•à‡§ü‡§∞‡•ç‡§® ‡§°‡§ø‡§ü‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç\n"
            "‚úÖ /pcr <STOCK> - Put/Call Ratio\n"
            "‚úÖ /ratios <STOCK> - ‡§∏‡§≠‡•Ä financial ratios\n"
            "‚úÖ /livemarket - ‡§≤‡§æ‡§á‡§µ ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü ‡§π‡§æ‡§≤\n"
            "‚úÖ /details <STOCK> - ‡§∂‡•á‡§Ø‡§∞ ‡§ï‡•Ä ‡§™‡•Ç‡§∞‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä CSV ‡§∏‡•á\n"
        )
        await update.message.reply_text(help_text, parse_mode="Markdown")

    async def details(update: Update, context: ContextTypes.DEFAULT_TYPE):
        args = context.args
        if not args:
            await update.message.reply_text("‚ö†Ô∏è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡•ç‡§ü‡•â‡§ï ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§¶‡•á‡§Ç, ‡§ú‡•à‡§∏‡•á `/details INFY`")
            return
        symbol = args[0].upper()
        try:
            row = stock_data[stock_data['SYMBOL'].str.upper() == symbol].iloc[0]
            response = f"üìã *{symbol}* Details:\n- Company: {row['NAME']}\n- Sector: {row['SECTOR']}\n- Market Cap: ‚Çπ{row['MARKET_CAP']} Cr\n- EPS: ‚Çπ{row['EPS']}\n- PE: {row['PE_RATIO']}\n- Face Value: ‚Çπ{row['FACE_VALUE']}"
        except:
            response = "‚ùå ‡§°‡•á‡§ü‡§æ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ‡§Ø‡§æ SYMBOL ‡§ó‡§≤‡§§ ‡§π‡•à‡•§"
        await update.message.reply_text(response, parse_mode="Markdown")

    # Existing command definitions (unchanged)...
    async def news(update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("üì∞ ‡§Ü‡§ú ‡§ï‡•Ä ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü ‡§®‡•ç‡§Ø‡•Ç‡§ú:\n- ‡§∏‡•á‡§Ç‡§∏‡•á‡§ï‡•ç‡§∏ ‡§î‡§∞ ‡§®‡§ø‡§´‡•ç‡§ü‡•Ä ‡§Æ‡•á‡§Ç ‡§Æ‡§ú‡§¨‡•Ç‡§§‡•Ä‡•§\n- FII ‡§®‡§ø‡§µ‡•á‡§∂ ‡§¨‡§¢‡§º‡§æ‡•§\n- IT ‡§∏‡•á‡§ï‡•ç‡§ü‡§∞ ‡§Æ‡•á‡§Ç ‡§π‡§≤‡§ö‡§≤‡•§")

    async def trend(update: Update, context: ContextTypes.DEFAULT_TYPE):
        args = context.args
        if not args:
            await update.message.reply_text("‚ö†Ô∏è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§ï‡•ã‡§à ‡§∏‡•ç‡§ü‡•â‡§ï ‡§Ø‡§æ ‡§á‡§Ç‡§°‡•á‡§ï‡•ç‡§∏ ‡§®‡§æ‡§Æ ‡§¶‡•á‡§Ç, ‡§ú‡•à‡§∏‡•á `/trend NIFTY`")
            return
        symbol = args[0].upper()
        await update.message.reply_text(f"üìà {symbol} ‡§ï‡§æ ‡§ü‡•ç‡§∞‡•á‡§Ç‡§°: ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§§‡•á‡§ú‡•Ä (AI ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§®)")

    async def fundamentals(update: Update, context: ContextTypes.DEFAULT_TYPE):
        args = context.args
        if not args:
            await update.message.reply_text("‚ö†Ô∏è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡•ç‡§ü‡•â‡§ï ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§¶‡•á‡§Ç, ‡§ú‡•à‡§∏‡•á `/fundamentals TCS`")
            return
        stock = args[0].upper()
        await update.message.reply_text(f"üìä {stock} ‡§ï‡•á ‡§´‡§Ç‡§°‡§æ‡§Æ‡•á‡§Ç‡§ü‡§≤‡•ç‡§∏:\n- Market Cap: ‚Çπ1.2 Lakh Cr\n- P/E: 24.5\n- ROE: 18%\n- Debt/Equity: 0.3")

    async def oi(update: Update, context: ContextTypes.DEFAULT_TYPE):
        args = context.args
        if not args:
            await update.message.reply_text("‚ö†Ô∏è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡•ç‡§ü‡•â‡§ï ‡§Ø‡§æ ‡§á‡§Ç‡§°‡•á‡§ï‡•ç‡§∏ ‡§¶‡•á‡§Ç, ‡§ú‡•à‡§∏‡•á `/oi RELIANCE`")
            return
        symbol = args[0].upper()
        await update.message.reply_text(f"üìä {symbol} Option Chain Summary:\n- Call OI: 2.1M\n- Put OI: 1.7M\n- PCR: 0.81")

    async def scan(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.message.photo:
            await update.message.reply_text("üì∑ ‡§ö‡§æ‡§∞‡•ç‡§ü ‡§∞‡§ø‡§∏‡•Ä‡§µ ‡§π‡•Å‡§Ü‡•§ ‡§∏‡•ç‡§ï‡•à‡§® ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...")
            await update.message.reply_text("üìä Candlestick Pattern: Bullish Engulfing\nüìà Trend: Upside Possibility")
        else:
            await update.message.reply_text("‚ö†Ô∏è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§ö‡§æ‡§∞‡•ç‡§ü ‡§ï‡§æ ‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§®‡§∂‡•â‡§ü ‡§≠‡•á‡§ú‡•á‡§Ç‡•§")

    async def pcr(update: Update, context: ContextTypes.DEFAULT_TYPE):
        args = context.args
        if not args:
            await update.message.reply_text("‚ö†Ô∏è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡•ç‡§ü‡•â‡§ï ‡§Ø‡§æ ‡§á‡§Ç‡§°‡•á‡§ï‡•ç‡§∏ ‡§¶‡•á‡§Ç, ‡§ú‡•à‡§∏‡•á `/pcr BANKNIFTY`")
            return
        symbol = args[0].upper()
        await update.message.reply_text(f"üìà {symbol} ‡§ï‡§æ Put/Call Ratio: 0.92")

    async def ratios(update: Update, context: ContextTypes.DEFAULT_TYPE):
        args = context.args
        if not args:
            await update.message.reply_text("‚ö†Ô∏è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡•ç‡§ü‡•â‡§ï ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§¶‡•á‡§Ç, ‡§ú‡•à‡§∏‡•á `/ratios INFY`")
            return
        stock = args[0].upper()
        await update.message.reply_text(f"üìä {stock} Ratios:\n- ROE: 21%\n- P/E: 26.4\n- EPS: ‚Çπ43.6\n- Book Value: ‚Çπ265\n- Dividend Yield: 1.3%\n- Face Value: ‚Çπ5")

    async def livemarket(update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("üì° ‡§≤‡§æ‡§á‡§µ ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü ‡§Ö‡§™‡§°‡•á‡§ü:\n- NIFTY: 19,876.45 (+0.56%)\n- BANKNIFTY: 45,230.20 (+0.74%)\n- INDIA VIX: 12.14")

    # Add all command handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("news", news))
    app.add_handler(CommandHandler("trend", trend))
    app.add_handler(CommandHandler("fundamentals", fundamentals))
    app.add_handler(CommandHandler("oi", oi))
    app.add_handler(CommandHandler("scan", scan))
    app.add_handler(CommandHandler("pcr", pcr))
    app.add_handler(CommandHandler("ratios", ratios))
    app.add_handler(CommandHandler("livemarket", livemarket))
    app.add_handler(CommandHandler("details", details))
    app.add_handler(MessageHandler(filters.PHOTO, scan))

    app.run_polling()

# Flask app for Render to bind to a port
web_app = Flask(__name__)

@web_app.route('/')
def home():
    return "\u2705 Panditji Bot is running on Render!"

if __name__ == '__main__':
    threading.Thread(target=run_telegram_bot).start()
    web_app.run(host='0.0.0.0', port=int(os.environ.get("PORT", 10000)))
